<?xml version="1.0" encoding="utf-8"?>
<!--
	DWA_Mobile

	Link http://www.desktop-web-analytics.com
	Link https://github.com/DesktopWebAnalytics
	Licence http://www.gnu.org/licenses/gpl-3.0-standalone.html GPL v3 or later

	$Id: Visits.mxml 237 2011-12-15 15:25:06Z benoit $
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark"
				viewActivate="initView()" currentState="loading" actionBarVisible="false" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:views="views.*" xmlns:states="views.states.*" >
	<fx:Script>
		<![CDATA[
			import com.dwa.common.profile.Profile;
			import com.dwa.common.reports.Reports;
			
			import mx.collections.XMLListCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.events.ViewNavigatorEvent;
			
			private var report:Reports;
			private var report2:Reports;
			
			private var result:XMLListCollection;
			private var result2:XML;
			
			private var ready:Boolean=false;
			private var ready2:Boolean=false;
			
			private function initView():void{
				
				titleView.text = resourceManager.getString('piwik', 'VisitFrequency_Evolution') + " - " + resourceManager.getString('piwik', 'General_DateRange') + ' ' + dateTimeFormatter.format(FlexGlobals.topLevelApplication.selectedStartDate) + " - " + dateTimeFormatter.format(FlexGlobals.topLevelApplication.selectedEndDate);
				
				report = new Reports();
				report.addEventListener(Event.COMPLETE, resultCall);
				report.addEventListener(ErrorEvent.ERROR, error);
				report.getVisitsChart(data as Profile, FlexGlobals.topLevelApplication.selectedPeriodDate);
				
				report2 = new Reports();
				report2.addEventListener(Event.COMPLETE, resultCall2);
				report2.addEventListener(ErrorEvent.ERROR, error2);
				report2.getVisits(data as Profile, FlexGlobals.topLevelApplication.selectedPeriodDate);
			}
			private function resultCall(event:Event):void{
				result = report.resultCollection;
				
				for each(var xml:XML in result){
					if(xml.nb_visits < 1) xml.nb_visits = 0;
				}
				
				ready = true;
				clear();
				
				if(ready && ready2) compute();
			}
			private function resultCall2(event:Event):void{
				result2 = report2.result;
				
				ready2 = true;
				clear2();
				
				if(ready && ready2) compute();
			}
			private function error(event:ErrorEvent):void{
				trace("error: " + event.text);
				clear();
				currentState = "error";
				errorState.message(event.text);
			}
			private function error2(event:ErrorEvent):void{
				trace("error: " + event.text);
				clear2();
				currentState = "error";
				errorState.message(event.text);
			}
			private function clear():void{
				report.removeEventListener(Event.COMPLETE, resultCall);
				report.removeEventListener(ErrorEvent.ERROR, error);
				report = null;
			}
			private function clear2():void{
				report2.removeEventListener(Event.COMPLETE, resultCall2);
				report2.removeEventListener(ErrorEvent.ERROR, error2);
				report2 = null;
			}
			
			private function compute():void{
				trace("draw chart");
				currentState = "chart";
				
				nbVisits.text = resourceManager.getString('piwik', 'VisitsSummary_NbVisits').replace('%s', result2.nb_visits);
				nbActions.text = resourceManager.getString('piwik', 'VisitsSummary_NbActionsDescription').replace('%s', result2.nb_actions);
				maxActions.text = resourceManager.getString('piwik', 'VisitsSummary_MaxNbActions').replace('%s', result2.max_actions);
				bounceRate.text = resourceManager.getString('piwik', 'VisitsSummary_NbVisitsBounced').replace('%s', result2.bounce_rate);
				
				actions.text = resourceManager.getString('piwik', 'VisitsSummary_NbActionsPerVisit').replace('%s', result2.nb_actions_per_visit);
				duration.text = resourceManager.getString('piwik', 'VisitsSummary_AverageVisitDuration').replace('%s', getTime(result2.avg_time_on_site));
				
				ca.categoryField = "@date";
				lineseries.yField = "nb_visits";
				visitsChart.dataProvider = result;
			
				//infos.removeElement(loading);
			}
			
			private function getTime(val:String):String{
				var value:Number = Number(val);
				var returnResult:String;
				var result:Number;
				var reste:Number;
				
				if(value >= 60){
					if(value >= 3600){
						if(value >= 86400){
							result = Math.floor(value / 86400);
							reste = Math.floor((value - (86400*result)) / 3600);
							returnResult = resourceManager.getString('piwik', 'General_DaysHours').replace('%1$s', result).replace('%2$s', reste);
						}else{
							result = Math.floor(value / 3600);
							reste = Math.floor((value - (3600*result)) / 60);
							returnResult = resourceManager.getString('piwik', 'General_HoursMinutes').replace('%1$s', result).replace('%2$s', reste);
						}
					}else{
						result = Math.floor(value / 60);
						reste = value - (60*result);
						returnResult = resourceManager.getString('piwik', 'General_MinutesSeconds').replace('%1$s', result).replace('%2$s', reste);
					}
				}else {
					returnResult = resourceManager.getString('piwik', 'General_Seconds').replace('%s', value);
				}
				
				return returnResult;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
		<mx:SeriesInterpolate id="interpolateIn" duration="1000" />
		
		<s:DateTimeFormatter id="dateTimeFormatter" locale="{resourceManager.getString('piwik', 'General_Locale')}" timeStyle="none" />
		<s:DateTimeFormatter id="shortDateFormatter" locale="{resourceManager.getString('piwik', 'General_Locale')}" timeStyle="none" dateStyle="short" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="loading" />
		<s:State name="chart" />
		<s:State name="tab" />
		<s:State name="error" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout paddingTop="10" paddingLeft="5" paddingRight="5" paddingBottom="5" />
	</s:layout>
	
	<s:Label id="titleView" width="100%" fontSize="20" textAlign="center" />
	
	<states:Loader width="100%" height="100%" includeIn="loading" />
	
	<states:Error id="errorState" width="100%" height="100%" includeIn="error" />
	
	<s:Scroller width="100%" height="100%" includeIn="chart">
		<s:Group width="100%" height="100%" >
			<s:VGroup width="100%" height="100%">
				<mx:AreaChart id="visitsChart" showDataTips="true" width="100%" minHeight="150" height="100%">
					<mx:backgroundElements>
						<mx:GridLines gridDirection="both" />
					</mx:backgroundElements>
					<mx:horizontalAxis>
						<mx:CategoryAxis id="ca" ticksBetweenLabels="false" />
					</mx:horizontalAxis>
					<mx:series>
						<mx:AreaSeries id="lineseries" displayName="{resourceManager.getString('piwik', 'General_ColumnNbVisits')}" form="curve" showDataEffect="{interpolateIn}">
							<mx:areaFill>
								<s:LinearGradient rotation="90">
									<s:entries>
										<s:GradientEntry color="#FF9E00" alpha=".8" />
										<s:GradientEntry color="#FF7D01" alpha=".8" />
									</s:entries>
								</s:LinearGradient>
								
							</mx:areaFill>
						</mx:AreaSeries>
					</mx:series>
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer axis="{ca}" showLabels="false"  />
					</mx:horizontalAxisRenderers>
					<mx:seriesFilters>
						<fx:Array />
					</mx:seriesFilters>
				</mx:AreaChart>
				
				<s:VGroup id="infos" width="100%">
					<s:Label id="nbVisits" width="100%" />
					<s:Label id="nbActions" width="100%" />
					<s:Label id="actions" width="100%" />
					
					<s:Label id="duration" width="100%" />
					<s:Label id="bounceRate" width="100%" />
					<s:Label id="maxActions" width="100%" />
				</s:VGroup>
			</s:VGroup>
		</s:Group>
	</s:Scroller>
	
</s:View>
