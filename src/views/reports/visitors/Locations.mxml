<?xml version="1.0" encoding="utf-8"?>
<!--
	DWA_Mobile

	Link http://www.desktop-web-analytics.com
	Link https://github.com/DesktopWebAnalytics
	Licence http://www.gnu.org/licenses/gpl-3.0-standalone.html GPL v3 or later

	$Id: Locations.mxml 299 2012-03-11 16:04:02Z benoit $
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 viewActivate="initView()" currentState="loading" actionBarVisible="false" xmlns:views="views.*" xmlns:states="views.states.*">
	
	<fx:Script>
		<![CDATA[
			import com.dwa.common.profile.Profile;
			import com.dwa.common.reports.Reports;
			
			import mx.collections.XMLListCollection;
			import mx.core.FlexGlobals;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			private var report:Reports;
			
			private var result:XMLListCollection;
			
			private function initView():void{
				titleView.text = resourceManager.getString('piwik', 'UserCountry_WidgetCountries') + ' - ' + resourceManager.getString('piwik', 'General_DateRange') + ' ' + dateTimeFormatter.format(FlexGlobals.topLevelApplication.selectedStartDate) + " - " + dateTimeFormatter.format(FlexGlobals.topLevelApplication.selectedEndDate);
				
				report = new Reports();
				report.addEventListener(Event.COMPLETE, resultApi);
				report.addEventListener(ErrorEvent.ERROR, error);
				report.getCountry(data as Profile, FlexGlobals.topLevelApplication.selectedPeriodDate);
			}
			private function resultApi(event:Event):void{
				result = report.resultCollectionRow;
				clear();
				compute();
			}
			private function error(event:ErrorEvent):void{
				trace("error: " + event.text);
				clear();
				currentState = "error";
				errorState.message(event.text);
			}
			private function clear():void{
				report.removeEventListener(Event.COMPLETE, resultApi);
				report.removeEventListener(ErrorEvent.ERROR, error);
				report = null;
			}
			private function compute():void{
				trace("locations");
				
				result.sort = new Sort();
				result.sort.fields = [new SortField("nb_visits", true, true)];
				result.refresh();
				
				currentState = "tab";
				list.dataProvider = result;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
		
		<s:DateTimeFormatter id="dateTimeFormatter" locale="{resourceManager.getString('piwik', 'General_Locale')}" timeStyle="none" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="loading" />
		<s:State name="tab" />
		<s:State name="error" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout paddingTop="10" paddingLeft="5" paddingRight="5" paddingBottom="5" />
	</s:layout>
	
	<s:Label id="titleView" width="100%" fontSize="20" textAlign="center" />
	
	<states:Loader width="100%" height="100%" includeIn="loading" />
	
	<states:Error id="errorState" width="100%" height="100%" includeIn="error" />
	
	<s:Group width="100%" height="100%" includeIn="tab">
		<s:SkinnableContainer id="legend" width="100%" height="40" fontSize="20">
			<s:Label text="{resourceManager.getString('piwik', 'UserCountry_Country')}" top="10" left="2" />
			<s:Label text="{resourceManager.getString('piwik', 'General_ColumnNbVisits')}" top="10" right="2" />
		</s:SkinnableContainer>
		
		<s:List id="list" width="100%" height="100%" top="40" left="2" right="2">
			<s:itemRenderer>
				<fx:Component>
					<s:IconItemRenderer width="100%" height="50" iconFunction="getIcon" iconWidth="18" iconHeight="12" initialize="iconitemrenderer1_initializeHandler(event)">
						<fx:Script>
							<![CDATA[
								import com.dwa.common.icons.LoadIcons;
								
								import mx.events.FlexEvent;
								
								import spark.components.Label;
								
								private var visits:Label;
								
								private var cache:LoadIcons;
								
								private function getIcon(item:Object):String{
									var path:String="";
									var icon:String = item.logo;
									icon = icon.substring(icon.lastIndexOf('/')+1);
									var file:File = File.applicationStorageDirectory.resolvePath('cache/'+icon);
									
									path = file.url;
									
									return path;
								}
								private function cacheIcon():void{
									var pathS:String = parentApplication.selectedProfile.websitePiwikAccess;
									
									cache = new LoadIcons();
									cache.addEventListener(Event.COMPLETE, onCache);
									cache.addEventListener(ErrorEvent.ERROR, errorCache);
									cache.cache(pathS + data.logo);
								}
								
								private function onCache(event:Event):void{
									clear();
								}
								private function errorCache(event:ErrorEvent):void{
									clear();
								}
								private function clear():void{
									cache.removeEventListener(Event.COMPLETE, onCache);
									cache.removeEventListener(ErrorEvent.ERROR, errorCache);
								}
								
								protected function iconitemrenderer1_initializeHandler(event:FlexEvent):void
								{
									// TODO Auto-generated method stub
									if(!visits){
										visits = new Label();
										visits.setStyle("textAlign", "right");
										visits.setStyle("verticalAlign", "middle");
										visits.width = 100;
										visits.height = 30;
										visits.x = parentDocument.width - 107;
										visits.y = 10;
										addChild(visits);
									}
									
								}
								
								override public function set data(value:Object):void{
									if(value != null){
										super.data = value;
										
										cacheIcon();
										
										this.label = value.label;
										visits.text = value.nb_visits;
										
									}
								}
							]]>
						</fx:Script>
						
					</s:IconItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</s:Group>
	
</s:View>
