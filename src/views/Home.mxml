<?xml version="1.0" encoding="utf-8"?>
<!--
	DWA_Mobile

	Link http://www.desktop-web-analytics.com
	Link https://github.com/DesktopWebAnalytics
	Licence http://www.gnu.org/licenses/gpl-3.0-standalone.html GPL v3 or later
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 title="{resourceManager.getString('piwik', 'SitesManager_MenuSites')}"
				 viewActivate="initView()" destructionPolicy="never">
	<fx:Script>
		<![CDATA[
			import com.dwa.common.profile.Profile;
			
			import mx.collections.ArrayList;
			import mx.core.FlexGlobals;
			
			import spark.formatters.DateTimeFormatter;
			
			private const DAY:int = 86400000;
			
			private function initView():void{
				trace("view home");
				//if(FlexGlobals.topLevelApplication.isTablet && !FlexGlobals.topLevelApplication.showBackButton) this.stage.displayState = StageDisplayState.NORMAL;
				
				websitesList.dataProvider = new ArrayList(data as Array);
			}
			private function selectWebsite():void{
				var selectedWebsite:Profile = websitesList.selectedItem;
				
				var formatDate:DateTimeFormatter = new DateTimeFormatter();
				formatDate.dateTimePattern = "yyyy-MM-dd";
				formatDate.setStyle("locale", "en_US");
				
				var start:Date = new Date();
				var end:Date = new Date();
				
				if(!selectedWebsite.websiteDay) end.time = end.time - DAY;
				start.time = end.time - (DAY * (selectedWebsite.websitePeriod-1));
				
				var startDate:String = formatDate.format(start);
				var endDate:String = formatDate.format(end);
				
				// save selected website
				FlexGlobals.topLevelApplication.selectedProfile = selectedWebsite;
				
				// save selected dates
				FlexGlobals.topLevelApplication.selectedPeriodDate = startDate + ',' + endDate;
				FlexGlobals.topLevelApplication.selectedStartDate = start;
				FlexGlobals.topLevelApplication.selectedEndDate = end;
				
				navigator.pushView(Dashboard);
			}
			
			private function addWebsite():void{
				navigator.pushView(CreateProfile);
			}
			
			private function help():void{
				navigator.pushView(About);
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	
	<s:navigationContent>
		<s:Button id="buttonInfo" click="help()">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/icons/low/ic_menu_info_details.png')"
										source240dpi="@Embed('assets/icons/med/ic_menu_info_details.png')"
										source320dpi="@Embed('assets/icons/high/ic_menu_info_details.png')" />
			</s:icon>
		</s:Button>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button styleName="buttonAdd" click="addWebsite()">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/icons/low/ic_menu_add.png')"
										source240dpi="@Embed('assets/icons/med/ic_menu_add.png')"
										source320dpi="@Embed('assets/icons/high/ic_menu_add.png')" />
			</s:icon>
		</s:Button>
	</s:actionContent>
	
	<s:List id="websitesList" width="100%" height="100%" horizontalScrollPolicy="off" itemRenderer="views.renderers.ProfileRenderer" change="selectWebsite()">
		
	</s:List>
</s:View>
